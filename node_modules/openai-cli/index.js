#! /usr/bin/env node
const { Configuration, OpenAIApi } = require("openai")
const rl = require("readline").createInterface({ input:process.stdin, output:process.stdout })
const d = new (require("dubnium"))(require("os").homedir())
const config = d.create("opencli-config", {
apiKey:"",
model: "text-davinci-002",
temperature: 0.7,
max_tokens: 256,
top_p: 1,
frequency_penalty: 0,
presence_penalty: 0,
},() => {})
const getkeyfrom = 'https://beta.openai.com/account/api-keys'

if(!process.argv[2]){
rl.close()
console.clear()
console.log(`Opencli Help \n\nAsk for help: ai ask \n\nChange API key: ai set-key\n\nGet API key: ai get-key\n\nOpen config: ai config\n\nPowered by OpenAI\n`)
}else if(process.argv[2].toLowerCase() == 'ask'){
if(!config.data.apiKey){
console.clear()
rl.question("Enter your OpenAI API key. (https://beta.openai.com/account/api-keys): ", key => {
let d = config.data
d.apiKey = key
config.overwrite(d)
console.log("Set API key!")
rl.close()
})
}

const configuration = new Configuration({
  apiKey: config.data.apiKey
})
const openai = new OpenAIApi(configuration)
console.clear()
rl.question('What is your question?  \n', async prompt => {
console.clear()
rl.close()
console.log("Loading...")
const response = await openai.createCompletion({
  model:config.data.model,
  prompt,
  temperature:config.data.temperature,
  max_tokens:config.data.max_tokens,
  top_p:config.data.top_p,
  frequency_penalty:config.data.frequency_penalty,
  presence_penalty:config.data.presence_penalty,
}).catch((err) => {
console.clear()
throw new Error(err)
})
console.clear()
if(!response) return
console.log(`\nYour input: ${prompt}\n${response.data.choices[0].text}\n`)
})
}else if(process.argv[2].toLowerCase() == 'set-key'){
    console.clear()
    rl.question('OpenAI API Key: ', key => {
    let d = config.data
    d.apiKey = key
    config.overwrite(d)
    console.log("Set API key!")
    rl.close()
    })
}else if(process.argv[2].toLowerCase() == 'config'){
rl.close()
let command = ''
switch (process.platform) {
    case 'darwin':
      command = 'open'
      break
    case 'win32':
      command = 'explore'
      break
    default:
      command = 'xdg-open'
      break
  }
console.log(require("child_process").execSync(`${command} ${d.locateRecord('opencli-config')}`))
}else if(process.argv[2].toLowerCase() == 'get-key'){
rl.close()
const key = d.get("opencli-config").data.apiKey 
console.log(`Current API key: ${key ? key : 'none' } \nGet your API key at ${getkeyfrom}`)
}